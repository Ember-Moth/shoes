# Example demonstrating named certificates and keys
# This shows how to define certificates once and use them in multiple places

# Define named certificates and keys
- cert: "main-server-cert"
  path: "cert.pem"

- key: "main-server-key"
  path: "key.pem"

- cert: "client-ca"
  path: "ca-cert.pem"

# Define a self-signed certificate inline
- cert: "self-signed-cert"
  data: |
    -----BEGIN CERTIFICATE-----
    certificate data
    -----END CERTIFICATE-----

- key: "self-signed-key"
  data: |
    -----BEGIN PRIVATE KEY-----
    private key data
    -----END PRIVATE KEY-----

# QUIC server using named certificates
- address: "0.0.0.0:443"
  transport: quic
  quic_settings:
    cert: "main-server-cert"    # Reference named certificate
    key: "main-server-key"      # Reference named key
    client_ca_certs:
      - "client-ca"             # Reference named CA certificate
  protocol:
    type: hysteria2
    password: "my-secret-password"

# TLS server reusing the same certificates
- address: "0.0.0.0:8443"
  protocol:
    type: tls
    sni_targets:
      "example.com":
        cert: "main-server-cert"    # Reuse the same certificate
        key: "main-server-key"      # Reuse the same key
        client_ca_certs:
          - "client-ca"
        protocol:
          type: vmess
          cipher: auto
          user_id: "b85798ef-e9dc-46a4-9a87-8da4499d36d0"
      "test.example.com":
        cert: "self-signed-cert"    # Use different certificate for this SNI
        key: "self-signed-key"
        protocol:
          type: vless
          user_id: "b85798ef-e9dc-46a4-9a87-8da4499d36d0"

# ShadowTLS with named certificates
- address: "0.0.0.0:9443"
  protocol:
    type: tls
    shadowtls_targets:
      "shadow.example.com":
        password: "shadow-example-password"
        handshake:
          cert: "main-server-cert"
          key: "main-server-key"
        protocol:
          type: shadowsocks
          cipher: 2022-blake3-chacha20-ietf-poly1305
          password: "N5tp51JibWA9kIPEUoDHzyyjfgkDYToOERh+u9L47fk="
